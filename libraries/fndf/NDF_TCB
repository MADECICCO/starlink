*+
*  Name:
*     NDF_TCB

*  Purpose:
*     Define NDF_ system Tuning Control Block (TCB).

*  Language:
*     Starlink Fortran 77

*  Type of Module:
*     Global variables include file.

*  Description:
*     This file defines global variables (tuning parameters) which
*     control the internal function of the NDF system.

*  Copyright:
*     Copyright (C) 1989, 1991, 1992, 1993 Science & Engineering Research Council.
*     Copyright (C) 1997 Central Laboratory of the Research Councils.
*     All Rights Reserved.

*  Licence:
*     This program is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either version 2 of
*     the License, or (at your option) any later version.
*
*     This program is distributed in the hope that it will be
*     useful,but WITHOUT ANY WARRANTY; without even the implied
*     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
*     PURPOSE. See the GNU General Public License for more details.
*
*     You should have received a copy of the GNU General Public License
*     along with this program; if not, write to the Free Software
*     Foundation, Inc., 51 Franklin Street,Fifth Floor, Boston, MA
*     02110-1301, USA

*  Authors:
*     RFWS: R.F. Warren-Smith (STARLINK)
*     DSB: David S. Berry (JACH, UCLan)
*     {enter_new_authors_here}

*  History:
*     27-NOV-1989 (RFWS):
*        Original version.
*     4-OCT-1991 (RFWS):
*        Expanded scope of this file to become a Tuning Control Block.
*        Added TCB_WARN.
*     14-JUL-1992 (RFWS):
*        Added SAVE statement for common block.
*     13-OCT-1993 (RFWS):
*        Added the TCB_FNFMT flag to control file name formats.
*     2-NOV-1993 (RFWS):
*        Added flags to support foreign file conversion.
*     11-MAR-1997 (RFWS):
*        Added TCB_DOCVT flag to control foreign file access.
*     1-NOV-2007 (DSB):
*        Added TCB_PXT to control default propgation of named extensions.
*     16-JUL-2012 (DSB):
*        Added TCB_SECMAX.
*     10-AUG-2018 (DSB):
*        Added TCB_FIXDT.
*     24-APR-2019 (DSB):
*        Added TCB_FIXSW.
*     {enter_further_changes_here}

*-

*  Global Variables:
*  ================
*  Do format conversion flag.
*  =========================
*  This logical flag determines whether the NDF library attempts to
*  access "foreign" data formats (i.e. files not in the native NDF
*  format) and to convert them to/from the native NDF format for
*  output/input.  If it is set .TRUE., foreign formats will be
*  accessed if the NDF_FORMATS_IN and/or NDF_FORMATS_OUT environment
*  variables are also set appropriately. If set .FALSE., all files
*  must be supplied in the native NDF format and no conversions will
*  be attempted. Its default value is established by the NDF1_INTCB
*  routine.
      LOGICAL TCB_DOCVT

*  Error tracing flag.
*  ==================
*  This logical flag controls whether the NDF1_TRACE routine actually
*  reports a message. This routine is called whenever another NDF_
*  system routine exits as a result of an error occurring within
*  itself or a lower level routine which it calls. This results in a
*  series of messages showing the sequence of routines which have
*  exited prematurely as a result of the error. The TCB_ETFLG flag
*  controls whether this internal diagnostic information is actually
*  produced.  Its initial value is established by the NDF1_INTCB
*  routine; its subsequent value is controlled by calls to NDF_TUNE
*  (or NDF_TRACE, which is now obsolete). Note that only those
*  routines in the NDF_ library written in Fortran can currently use
*  this facility.
      LOGICAL TCB_ETFLG

*  File name format.
*  ================
*  There is no external access to this flag. It is initialised by the
*  NDF1_INTCB routine to contain a value indicating the format of file
*  names on the host machine and is used at various places when file
*  names must be manipulated. The constants specifying file name
*  formats are defined in the NDF_CONST include file.
      INTEGER TCB_FNFMT

*  Keep NDF objects flag.
*  =====================
*  This flag controls whether NDF objects created as intermediate
*  results of data conversion on foreign format files will be
*  retained.  If it is set .TRUE., they will be created in the default
*  directory and not deleted. If set .FALSE., scratch objects will be
*  created and deleted when they are no longer required. Its default
*  value is established by the NDF1_INTCB routine.
      LOGICAL TCB_KEEP

*  Show data conversions flag.
*  ==========================
*  This flag controls whether information about data conversion
*  performed on foreign format files will be displayed. If set .TRUE.,
*  this information will be displayed on the standard output for use
*  in debugging format conversion commands. If set .FALSE., this
*  information will not be displayed. Its default value of is
*  established by the NDF1_INTCB routine.
      LOGICAL TCB_SHCVT

*  Warning message flag.
*  ====================
*  This flag controls whether warning messages are issued on detection
*  of non-fatal errors in the structure of NDF data objects. If it is
*  set .TRUE., a warning message is reported and immediately flushed.
*  If it is set .FALSE., then no message is issued and execution
*  continues normally. Its default value is established by the
*  NDF1_INTCB routine.
      LOGICAL TCB_WARN

*  Propagation of extensions
*  =========================
*  This is a pointer to an AST KeyMap in which each entry has a key that
*  is the name of an NDF extension, and an integer value that is non-zero
*  if the extension is to be propagated by default (by NDF_PROP), or zero
*  if the extension is not to be propagated by default. Any extension that
*  is not specified within this KeyMap is propagated by default.
      INTEGER TCB_PXT

*  Automatic history creation flag.
*  ================================
*  If this flag is .TRUE., the NDF_CREAT and NDF_NEW routines will add a
*  History component automatically to the output NDF. If this flag is
*  .FALSE. (the default), then NDF_CREAT and NDF_NEW do not include a
*  History component in the output NDF.
      LOGICAL TCB_AUTOHISTORY

*  Maximum number of pixels in an NDF section.
*  ===========================================
*  An error will be reported if a request is made for an NDF section
*  containing more than TCB_SECMAX mega-pixels. This is to guard against
*  (for instance) accidental use of incorrect WCS units when specifying a
*  section on the command line.
      INTEGER TCB_SECMAX

*  Fix the date/time strings stored in history records?
*  ====================================================
*  If .TRUE., the date and time string stored in any new History records
*  will be fixed at an arbitrary value ("10-AUG-2018 11:00:00") regardless
*  of the current time. If .FALSE., the real date and time will be used.
*  This facility is intended to facilitate regression testing, where the
*  difference in date/time in history records could cause a test to fail.
      LOGICAL TCB_FIXDT

*  Fix the software path stored in history records?
*  ================================================
*  If .TRUE., the path section of the software string stored in any
*  new History records will be fixed at a blank value regardless of
*  the original path. If .FALSE., the real path will be retained.
*  This facility is intended to facilitate regression testing, where the
*  difference in software path within history records could cause a test
*  to fail.
      LOGICAL TCB_FIXSW

*  Common blocks:
*  =============

*  Non-character data.
      COMMON /NDF1_TCB1/ TCB_DOCVT, TCB_ETFLG, TCB_FNFMT, TCB_KEEP,
     :                   TCB_SHCVT, TCB_WARN, TCB_PXT, TCB_AUTOHISTORY,
     :                   TCB_SECMAX, TCB_FIXDT, TCB_FIXSW

*  Save common block contents.
      SAVE /NDF1_TCB1/

*.
