      SUBROUTINE NDF1_CVT<T>( BAD, N, TYPE, PNTR, RESULT, DCE, STATUS )
*+
*  Name:
*     NDF1_CVT<T>

*  Purpose:
*     Convert a vectorised array to <COMM>.

*  Language:
*     Starlink Fortran 77

*  Invocation:
*     CALL NDF1_CVT<T>( BAD, N, TYPE, PNTR, RESULT, DCE, STATUS )

*  Description:
*     The routine converts a vectorised array of any primitive numeric
*     type to a data type of <COMM>, checking for the presence of bad
*     pixels if required. The input array is passed by pointer; the
*     output array is passed directly.

*  Arguments:
*     BAD = LOGICAL (Given)
*        Whether to check for bad pixel values.
*     N = INTEGER (Given)
*        Number of array elements to convert.
*     TYPE = CHARACTER * ( * ) (Given)
*        The data type of the input vectorised array. This value must be
*        one of the HDS primitive numeric data type strings and must be
*        supplied in upper case.
*     PNTR = INTEGER (Given)
*        Pointer to the input vectorised array.
*     RESULT( N ) = <TYPE> (Returned)
*        The output <COMM> vectorised array, to contain the converted
*        values.
*     DCE = LOGICAL (Returned)
*        Whether any data conversion errors occurred (bad values are
*        entered into the affected elements of the output array if this
*        happens).
*     STATUS = INTEGER (Given and Returned)
*        The global status.

*  Algorithm:
*     -  Initialise and mark the error stack.
*     -  Test the input data type specification against each valid value
*     in turn, calling the appropriate data conversion routine.
*     -  Note if the data type specification is not valid.
*     -  If a data conversion error ocurred, note this fact and annul
*     any error reports this might have generated.
*     -  Release the error stack.
*     -  If the input data type specification was not valid, then report
*     an error.

*  Authors:
*     RFWS: R.F. Warren-Smith (STARLINK)
*     {enter_new_authors_here}

*  History:
*     2-NOV-1990 (RFWS):
*        Original, derived from the equivalent ARY_ system routine.
*     {enter_changes_here}

*  Bugs:
*     {note_any_bugs_here}

*-

*  Type definitions:
      IMPLICIT NONE              ! No implicit typing

*  Global Constants:
      INCLUDE 'SAE_PAR'          ! Standard SAE constants
      INCLUDE 'CNF_PAR'          ! For CNF_PVAL function
      INCLUDE 'DAT_PAR'          ! DAT_ public_constants
      INCLUDE 'NDF_ERR'          ! NDF_ error codes

*  Arguments Given:
      LOGICAL BAD
      INTEGER N
      CHARACTER * ( * ) TYPE
      INTEGER PNTR

*  Arguments Returned:
      <TYPE> RESULT
      LOGICAL DCE

*  Status:
      INTEGER STATUS             ! Global status

*  Local variables:
      INTEGER IERR               ! Position of first conversion error
      INTEGER NERR               ! Number of conversion errors
      LOGICAL TYPOK              ! Whether the TYPE argument is valid

*.

*  Check inherited global status.
      IF ( STATUS .NE. SAI__OK ) RETURN

*  Initialise and mark the error stack.
      TYPOK = .TRUE.
      NERR = 0
      CALL ERR_MARK

*  Test for each valid input data type in turn and call the appropriate
*  conversion routine.
      IF ( TYPE .EQ. '_BYTE' ) THEN
         CALL VEC_BTO<T>( BAD, N, %VAL( CNF_PVAL( PNTR ) ), RESULT,
     :                    IERR, NERR, STATUS )

      ELSE IF ( TYPE .EQ. '_UBYTE' ) THEN
         CALL VEC_UBTO<T>( BAD, N, %VAL( CNF_PVAL( PNTR ) ), RESULT,
     :                     IERR, NERR, STATUS )

      ELSE IF ( TYPE .EQ. '_DOUBLE' ) THEN
         CALL VEC_DTO<T>( BAD, N, %VAL( CNF_PVAL( PNTR ) ), RESULT,
     :                    IERR, NERR, STATUS )

      ELSE IF ( TYPE .EQ. '_INTEGER' ) THEN
         CALL VEC_ITO<T>( BAD, N, %VAL( CNF_PVAL( PNTR ) ), RESULT,
     :                    IERR, NERR, STATUS )

      ELSE IF ( TYPE .EQ. '_REAL' ) THEN
         CALL VEC_RTO<T>( BAD, N, %VAL( CNF_PVAL( PNTR ) ), RESULT,
     :                    IERR, NERR, STATUS )

      ELSE IF ( TYPE .EQ. '_WORD' ) THEN
         CALL VEC_WTO<T>( BAD, N, %VAL( CNF_PVAL( PNTR ) ), RESULT,
     :                    IERR, NERR, STATUS )

      ELSE IF ( TYPE .EQ. '_UWORD' ) THEN
         CALL VEC_UWTO<T>( BAD, N, %VAL( CNF_PVAL( PNTR ) ), RESULT,
     :                     IERR, NERR, STATUS )

*  Note if the input data type specified is not valid.
      ELSE
         TYPOK = .FALSE.
      END IF

*  If a data conversion error occurred, then annul any error reports it
*  might have produced.
      DCE = NERR .NE. 0
      IF ( DCE ) CALL ERR_ANNUL( STATUS )
      CALL ERR_RLSE

*  Report an error if the input data type specified was not valid.
      IF ( STATUS .EQ. SAI__OK ) THEN
         IF( .NOT. TYPOK ) THEN
            STATUS = NDF__FATIN
            CALL MSG_SETC( 'ROUTINE', 'NDF1_CVT<T>' )
            CALL MSG_SETC( 'BADTYPE', TYPE )
            CALL ERR_REP( 'NDF1_CVT<T>_TYPE',
     :      'Routine ^ROUTINE called with an invalid TYPE ' //
     :      'argument of ''^BADTYPE'' (internal programming error).',
     :      STATUS )
         END IF
      END IF

*  Call error tracing routine and exit.
      IF ( STATUS .NE. SAI__OK ) CALL NDF1_TRACE( 'NDF1_CVT<T>',
     :STATUS )

      END
